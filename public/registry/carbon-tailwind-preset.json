{
  "name": "carbon-tailwind-preset",
  "type": "registry:lib",
  "files": [
    {
      "type": "registry:lib",
      "content": "// @ts-expect-error - No type definitions unavailable for @carbon/colors\r\nimport * as colors from \"@carbon/colors\";\r\n// @ts-expect-error - No type definitions unavailable for @carbon/type\r\nimport * as type from \"@carbon/type\";\r\nimport plugin from \"tailwindcss/plugin\";\r\n\r\ntype CarbonStyles = Record<\r\n  string,\r\n  {\r\n    breakpoints?: Record<\r\n      string,\r\n      {\r\n        [key: string]: string;\r\n      }\r\n    >;\r\n  }\r\n>;\r\n\r\nexport const camelToDash = (str: string): string => {\r\n  return str\r\n    .replace(/([A-Z])|(\\d+)/g, \"-$&\")\r\n    .toLowerCase()\r\n    .replace(/^-/, \"\"); // Remove leading dash if present\r\n};\r\n\r\nexport const fontsUtilities = () => {\r\n  const styles = type.styles as CarbonStyles;\r\n\r\n  const utilities: Record<\r\n    string,\r\n    string | Record<string, Record<string, string> | string>\r\n  > = {};\r\n  Object.entries(styles).forEach(([key, value]) => {\r\n    const dashKey = camelToDash(key);\r\n    const { breakpoints, ...rest } = value;\r\n\r\n    utilities[`.font-${dashKey}`] = {\r\n      ...rest,\r\n      ...(breakpoints?.md && {\r\n        \"@screen md\": breakpoints.md,\r\n      }),\r\n      ...(breakpoints?.lg && {\r\n        \"@screen lg\": breakpoints.lg,\r\n      }),\r\n    };\r\n  });\r\n\r\n  return utilities;\r\n};\r\n\r\nconst typePlugin = plugin(({ addUtilities, matchUtilities, theme }) => {\r\n  const utilities = fontsUtilities();\r\n\r\n  matchUtilities(\r\n    {\r\n      \"inset-block\": (value) => ({\r\n        insetBlock: value,\r\n      }),\r\n      \"inset-inline\": (value) => ({\r\n        insetInline: value,\r\n      }),\r\n    },\r\n    {\r\n      supportsNegativeValues: true,\r\n      values: theme(\"inset\"),\r\n    }\r\n  );\r\n\r\n  matchUtilities(\r\n    {\r\n      \"block-start\": (value) => ({\r\n        insetBlockStart: value,\r\n      }),\r\n      \"block-end\": (value) => ({\r\n        insetBlockEnd: value,\r\n      }),\r\n      \"inline-start\": (value) => ({\r\n        insetInlineStart: value,\r\n      }),\r\n      \"inline-end\": (value) => ({\r\n        insetInlineEnd: value,\r\n      }),\r\n    },\r\n    {\r\n      supportsNegativeValues: true,\r\n      values: theme(\"inset\"),\r\n    }\r\n  );\r\n  addUtilities(utilities);\r\n});\r\n\r\nexport const carbonPreset = {\r\n  theme: {\r\n    colors: { ...colors.colors, transparent: \"transparent\", white: \"#fff\" },\r\n  },\r\n  plugins: [typePlugin],\r\n};\r\n\r\nexport default carbonPreset;\r\n",
      "path": "lib/carbon-tailwind-preset/carbon-tailwind-preset.ts",
      "target": "components/lib/carbon-tailwind-preset/carbon-tailwind-preset.ts"
    }
  ],
  "dependencies": [
    "@carbon/react",
    "@carbon/icons-react"
  ]
}