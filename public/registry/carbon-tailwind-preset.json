{
  "name": "carbon-tailwind-preset",
  "type": "registry:lib",
  "files": [
    {
      "content": "// @ts-expect-error - No type definitions unavailable for @carbon/colors\nimport * as colors from \"@carbon/colors\";\n// @ts-expect-error - No type definitions unavailable for @carbon/type\nimport * as type from \"@carbon/type\";\nimport plugin from \"tailwindcss/plugin\";\n\ntype CarbonStyles = Record<\n  string,\n  {\n    breakpoints?: Record<\n      string,\n      {\n        [key: string]: string;\n      }\n    >;\n  }\n>;\n\nexport const camelToDash = (str: string): string => {\n  return str\n    .replace(/([A-Z])|(\\d+)/g, \"-$&\")\n    .toLowerCase()\n    .replace(/^-/, \"\"); // Remove leading dash if present\n};\n\nexport const fontsUtilities = () => {\n  const styles = type.styles as CarbonStyles;\n\n  const utilities: Record<\n    string,\n    string | Record<string, Record<string, string> | string>\n  > = {};\n  Object.entries(styles).forEach(([key, value]) => {\n    const dashKey = camelToDash(key);\n    const { breakpoints, ...rest } = value;\n\n    utilities[`.font-${dashKey}`] = {\n      ...rest,\n      ...(breakpoints?.md && {\n        \"@screen md\": breakpoints.md,\n      }),\n      ...(breakpoints?.lg && {\n        \"@screen lg\": breakpoints.lg,\n      }),\n    };\n  });\n\n  return utilities;\n};\n\nconst typePlugin = plugin(({ addUtilities, matchUtilities, theme }) => {\n  const utilities = fontsUtilities();\n\n  matchUtilities(\n    {\n      \"inset-block\": (value) => ({\n        insetBlock: value,\n      }),\n      \"inset-inline\": (value) => ({\n        insetInline: value,\n      }),\n    },\n    {\n      supportsNegativeValues: true,\n      values: theme(\"inset\"),\n    }\n  );\n\n  matchUtilities(\n    {\n      \"block-start\": (value) => ({\n        insetBlockStart: value,\n      }),\n      \"block-end\": (value) => ({\n        insetBlockEnd: value,\n      }),\n      \"inline-start\": (value) => ({\n        insetInlineStart: value,\n      }),\n      \"inline-end\": (value) => ({\n        insetInlineEnd: value,\n      }),\n    },\n    {\n      supportsNegativeValues: true,\n      values: theme(\"inset\"),\n    }\n  );\n  addUtilities(utilities);\n});\n\nexport const carbonPreset = {\n  theme: {\n    colors: { ...colors.colors, transparent: \"transparent\", white: \"#fff\" },\n  },\n  plugins: [typePlugin],\n};\n\nexport default carbonPreset;\n",
      "path": "lib/carbon.tailwind-preset.ts",
      "target": "components/lib/carbon.tailwind-preset.ts"
    }
  ],
  "dependencies": [
    "@carbon/react"
  ]
}